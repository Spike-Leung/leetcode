* 最初的想法
  先复制一遍 next 指针，之后再复制 random 指针。

  但是在复制 random 指针时，由于可能跨多个节点，还需要先遍历一遍才能找到
  节点，n 个节点，都要遍历 n 遍，就需要 O(n^2) 的时间，慢。

* 剑指 Offer 思路
  慢在于查找节点，是否有办法在查找上做文章呢？时间慢，是否可以利用空间换
  时间呢?

  可以使用哈希表，将原节点 A 和复制的节点 A' 放到一个哈希表 (A, A'),
  第一步，还是先复制 next 指针，接着复制 random 指针，此时可以根据
  哈希表直接查 random 指针对应的复制指针 random', 就只需要 O(1) 的时间找到了。

  然而，这需要额外耗费 O(n) 的空间，是否可以减少空间，还保证时间复杂度呢？

  有没有类似哈希表的方法呢？

  如果复制成这样：

  A -> B -> C


  A -> A' -> B -> B' -> C -> C'

  假设 A 的 random 指向 C，那么 A' 应该指向 C', 而 C' 就是 C.next,
  那么复制 random 的时候，其实就是找原节点的 random.next 即可。

  很巧妙的一种方法，节省了空间，还保证了时间复杂度。

  由于复制的链表和原链表是混在一起的，将他们分开，即可得到复制的链表了。

* 注意点
  不能自己定义 Node 这个函数，题目本身已经存在了，不需要自己重新定义。
  自己重新定义的 Node 会覆盖了题目给的，就报错了。
