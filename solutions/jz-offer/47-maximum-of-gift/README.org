这道题一开始没头绪，看到书里提到了动态规划，才想起来可以动态规划解决。

其实看题就可以联想到可能可以动态规划，因为是求最值，动态规划往往也是用来解决
最值问题。

但是动态规划还不熟悉，于是看了看[[https://github.com/labuladong/fucking-algorithm/blob/master/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6.md][动态规划详解]], 里面说到，动态规划其实就是要穷举出所有的结果，
然后找到最优解。

*明确 base case -> 明确「状态」-> 明确「选择」 -> 定义 dp 数组/函数的含义。*

然后就尝试先穷举，既然最后一定要去到右上角，可以从上面到右上角，也可以从左边到右上角，
那么怎么选择呢，那就选择两者中累积值最大的一个。而它们的累积值，也可以从上一个元素，
和左边元素中的最大值中选出。

最终就会去到第一个元素，即 grip[0][0]

于是就找到了 base case: dp[0][0] = grip[0][0];

然后选择就是 dp[i][j] = Max(上面元素累积值，左边元素的累积值) + grip[i][j]
即 dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + grip[i][j]

思路有了，实现即可。
