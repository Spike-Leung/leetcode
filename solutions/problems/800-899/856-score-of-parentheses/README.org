* 思路
做过一些括号相关的之后，容易想到此类题目可以用“栈”去解决，将"("入栈，
碰到")"出栈，去处理问题。

对于本题，也可以入栈出栈括号，去累积分数，当"(" 和 ")" 的下标相邻时，
说明时一个 "()"， 累积一分。

而下标不相邻，则需要知道括号内的分数总和，然后乘以 2 得到分数，因此还
需要一个变量来记录括号内的分数总和。

又因为可能存在多个嵌套的括号，每个嵌套括号都要去累积内部总和，就需要多
个变量去存储，每碰到一个嵌套的括号，都要从 0 开始去累积这个嵌套括号的
分数。

综合考虑，可以用栈去维护这些变量，初始化的时候，总分数为 0，初始化栈为 [0]

每碰到一个"(", 则需要重新开始累积分数，因此入栈一个 0，用于累积括号内
部的分数，每碰到一个 ")", 则可以消除一个 “(”, 此时出栈，判断出栈元素是
否为 0，如果为 0，则意味着是一对 “()”, 累积分数为 1，累积结束后，将分
数和栈顶元素的分数相加，累积括号内部的分数。

如果继续处理，当出栈的元素不为 0，则意味着消除的括号是一个嵌套的括号，
出栈元素即为此括号内部累积的总和，那么这个括号的分数为内部总和 * 2，即
出栈元素 * 2

一直处理，直到处理完所有的字符。

此时，栈顶的元素，即为累积到最后的总和。

* 参考
- [[https://leetcode.cn/problems/score-of-parentheses/solution/gua-hao-de-fen-shu-by-leetcode-solution-we6b/][括号的分数]]
