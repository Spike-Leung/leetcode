* 思路
  类似快速排序的 partition 操作，取 0 作为 pivot，不等于 0 的放在左边，等于 0 的放在右边。

  i 表示当前遍历的下标，j 表示不等于零的部分的最后一个元素的后一个元素。

  [x,x,x,...,j,0,0,...,i]

  在 [0, j) 这个区间都是不等于 0 的

  在 [j, i) 这个区间都是等于 0 的

  用 i 去遍历数组，当遇到等于 0 的，则继续遍历。

  遇到不等于 0 的，则将其交换到前面，nums[j] = nums[i], 交换后，j 向后移动。

  直到遍历完数组。

* 参考
  - [[https://leetcode-cn.com/problems/move-zeroes/solution/283-yi-dong-ling-shuang-zhi-zhen-zuo-fa-6wmvs/][283. 移动零 | 双指针做法超清晰讲解 【c++/java版本】]]
  - [[https://leetcode-cn.com/problems/move-zeroes/solution/yi-dong-ling-by-leetcode-solution/][移动零]]
