* 思路
** 双重循环
双重循环，选一个数，然后从往后找看有没有和他相同的数字出现。

时间复杂度 O(n ^ 2) 但能通过测试
#+begin_src js
  var findDuplicate = function(nums) {
      const n = nums.length

      for (let i = 0; i < n; i++) {
          for (let j = i + 1; j < n; j++) {
              if (nums[i] === nums[j]) {
                  return nums[i]
              }
          }
      }
  }
#+end_src

** 二分查找
不容易想到，针对这道题的限制条件，可以使用二分查找去解决。

题目要的就是从数组里找一个数字，可以想想有什么相关的查找方法。

数组长度是 n + 1, 数字都在 [1, n] 范围内，根据 [[https://zh.wikipedia.org/wiki/%E9%B4%BF%E5%B7%A2%E5%8E%9F%E7%90%86][抽屉原理]]，可知一定存在一个重复的数字。

考虑，如果给定的数组，是排好序的，我们假设 n 为 5， 那么数组长度为 6， 数字范围是 [1, 5], 其中，假设重复的数字是 4

那么，数组可能是这样的：

[2,1,3,4,5,4]

假设数组是排序好的, 那么看起来是这样的：

[1,2,3,4,4,5]

如果没有重复的数字，应该是这样的：

[1,2,3,4,5,6] (不过实际上不能取到 6 这个数字)

那么，可以发现一个规律，如果从 [1, n] 任意取一个数字 k

这个数字不是重复的，那么数组中就会有刚好 k 个数字小于等于 k，例如 3，只有 1，2，3 三个数字小于等于 3

如果 k 是重复的，那么数组中小于等于 k 的数字数量，就会大于 k，例如 4，有 1，2，3，4，4，五个数字小于等于 4

于是，可以用二分查找，从 [1, n] 中，二分查找一个数字 x ，统计原数组中小于等于 x 的数字数量。

如果数量小于等于 x，则说明 [1, x] 之间没有重复数字，继续中找 [x + 1, n]。

如果数量超过 x，则说明 [1, x] 之间存在重复数字，继续找 [1, x]。

不断缩小范围，知道找到重复的数字。

* 参考
- [[https://leetcode.cn/problems/find-the-duplicate-number/solution/xun-zhao-zhong-fu-shu-by-leetcode-solution/][寻找重复数]]
- [[https://leetcode.cn/problems/find-the-duplicate-number/solution/er-fen-fa-si-lu-ji-dai-ma-python-by-liweiwei1419/][二分法]]
- [[https://leetcode.cn/problems/find-the-duplicate-number/solution/287xun-zhao-zhong-fu-shu-by-kirsche/][快慢指针]]
