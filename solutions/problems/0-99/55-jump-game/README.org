* 思路
** 模拟
想着从下标 0 开始，尝试所有跳法，跳到下一个下标，继续尝试，看能不能到达。

这样时间复杂度会很高，过不了测试。

#+begin_src js
  var canJump = function(nums) {
    const n = nums.length
    // dp[i][j] 表示，从下标 i 往后跳 j 步，是否能到达终点
    const dp = Array.from({ length: n }, () => [])

    function jump(jumpIndex) {
      const steps = nums[jumpIndex]

      for (let i = 0; i <= steps; i++) {
        const nextJumpIndex = jumpIndex + i

        if (i == 0) {
          // 如果不跳，则看当前是否为终点
          dp[jumpIndex][0] = jumpIndex === n - 1
        } else if (nextJumpIndex < n - 1) {
          // 如果跳了之后，还没到达终点，继续跳
          dp[jumpIndex][i] = jump(nextJumpIndex)
        } else if (nextJumpIndex === n - 1) {
          // 如果跳了刚好达到终点，说明能到达
          dp[jumpIndex][i] = true
        } else {
          // 如果跳了超过终点了，说明这步跳大了，无效
          dp[jumpIndex][i] = false
        }
      }

      // 只要从这个下标，跳 0 ～ nums[i] 步，其中某一步能到达，则能到达
      return dp[jumpIndex].some((i) => i)
    }

    return jump(0)
  }
#+end_src

** 贪心
既然从某个下标 i，尝试所有可能的跳法，时间复杂度高，那能不能少跳一些？

对于 [3,0,1,3,4], 从下标 0 开始跳，最远可以跳到下标 3

能到达下标 3，下标 3 左边的节点也肯定能到的。

那么，对所有可以到达的节点，去找到他们能跳的最远距离，如果存在一个能到
达的下标，且其能跳的最远距离超过数组长度，那就说明能到达终点。

* 参考
- [[https://leetcode.cn/problems/jump-game/solution/55-by-ikaruga/][【跳跃游戏】别想那么多，就挨着跳吧]]
- [[https://leetcode.cn/problems/jump-game/solution/tiao-yue-you-xi-by-leetcode-solution/][跳跃游戏]]
