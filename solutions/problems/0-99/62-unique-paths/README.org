* 思路
** dfs
容易想到用 dfs 去走所有的路径，当走到终点则统计数量。

#+begin_src js
  var uniquePaths = function(m, n) {
    let count = 0

    function dfs(x, y) {
      // 避免越界
      if (x >= m || y >= n) {
        return
      }

      // [m - 1, n - 1] is end
      if (x === m - 1 && y === n - 1) {
        count++
        return
      }

      // right
      dfs(x + 1, y)
      // down
      dfs(x, y + 1)
    }

    dfs(0, 0)

    return count
  }
#+end_src

对于小的矩阵而言是可行的，但矩阵一旦变大，时间复杂度就会很高，存在很多重复的计算。

例如，对于中间的某个 (x, y) 组合，可以从 (x - 1, y) 或者 (x, y - 1) 到
达，而他们又都对 (x, y) 进行了递归求路径，这就出现了重复计算。

* 动态规划
因为 (x, y) 可以由左边格子(x - 1, y), 上面的格子（x, y - 1）到达，于是，
如果知道到达 (x - 1, y)，(x, y - 1) 的路径数量，那么 (x, y) 的路径就是
他们的和。

于是可以得出 pathCounts[x][y] = pathCounts[x - 1][y] + pathCounts[x][y - 1]

由此得到了动态转换方程。

对于 x，y，他们不能小于 0，当 x 或 y 等于 0 时，意味着是上边界或者坐边
界，到达边界的路径数量为 1，即从左上角到左上角，只有一条路径。

于是有 pathCounts[x][0] = 1, pathCounts[0][y] = 1

最后返回 pathCounts[m - 1][n - 1] 即为答案

时间复杂度是 O(mn), 空间复杂度是 O(mn)
#+begin_src js
  var uniquePaths = function(m, n) {
    const dp = Array.from({ length: m }, () => Array.from({ length: n }, () => 0) )

    // 置第一列为 1
    for (let i = 0; i < m; i++) {
      dp[i][0] = 1
    }

    // 置第一行为 1
    for (let i = 0; i < n; i++) {
     dp[0][i] = 1
    }

    for (let i = 1; i < m; i++) {
      for (let j = 1; j < n; j++) {
        dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
      }
    }

    return dp[m - 1][n - 1]
  }
#+end_src
** 优化空间复杂度
因为某个节点的路径，只依赖上面和左边的节点。考虑从上往下一行一行地去计
算，某一行计算完后，上一行就不需要了。

例如，累计好第二行的值，第一行的值就没用了，我们只关心最后一行的值。

因此，可以用一个数组存储一行的值，滚动地更新。

* 参考
- [[https://leetcode.cn/problems/unique-paths/solution/bu-tong-lu-jing-by-leetcode-solution-hzjf/][不同路径]]
- [[https://leetcode.cn/problems/unique-paths/solution/dong-tai-gui-hua-by-powcai-2/][动态规划]]
