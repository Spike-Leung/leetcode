* 思路
** 递归
   分析前序和中序得到的结果：

   前序: [根, [左子树节点], [右子树节点]]

   中序: [[左子树节点], 根, [右子树节点]]

   根节点很容易找到，就是 *前序* 遍历的第一个节点。

   找到根之后，通过在 *中序* 遍历中找到根的位置，根的左边剩下的左节点，右边是剩下的右节点。

   对于同一棵树而言，前序和中序的左节点个数是一样的。

   所以，根据中序遍历的左节点个数，可以在前序遍历中，找到对应的前序遍历的左子节点。

   于是得到了左子树的前序和中序遍历，右子树的前序和中序遍历，至此就发现是个递归的思路，递归解决即可。

   #+begin_src js
     var buildTree = function (preorder, inorder) {
       if (preorder.length === 0) {
         return null
       }

       // 找到根节点，为前序遍历的第一个节点
       const rootVal = preorder[0]
       const root = new TreeNode(rootVal)
       // 从中序遍历中找到根节点的下标
       const rootIndex = inorder.indexOf(rootVal)
       // 中序遍历，根节点的左边就是左子树
       const leftInorder = inorder.slice(0, rootIndex)
       // 左子树节点数量
       const leftInorderLength = leftInorder.length

       // 左指针指向左子树, 找到左子树对应的前序遍历，和中序遍历进行递归
       root.left = buildTree(preorder.slice(1, leftInorderLength + 1), leftInorder)
       // 右指针指右左子树
       root.right = buildTree(
         preorder.slice(leftInorderLength + 1),
         inorder.slice(rootIndex + 1)
       )

       return root
     }
   #+end_src
*** 优化
    每次都要遍历中序遍历，找到根节点的下标，时间复杂度较高。

    可以提前构建一个哈希表，减少遍历，快速定位节点下标。

    #+begin_src js
      var buildTree = function (preorder, inorder) {
        if (preorder.length === 0) {
          return null
        }

        const n = inorder.length
        const index = {}

        inorder.forEach((v, i) => {
          index[v] = i
        })

        function build(preorder, inorder, preStart, preEnd, inStart, inEnd) {
          if (inStart > inEnd) {
            return null
          }

          const rootVal = preorder[preStart]
          const root = new TreeNode(rootVal)
          const rootIndex = index[rootVal]
          const leftSize = rootIndex - inStart

          root.left = build(
            preorder,
            inorder,
            preStart + 1,
            preStart + leftSize,
            inStart,
            rootIndex - 1
          )
          root.right = build(
            preorder,
            inorder,
            preStart + 1 + leftSize,
            preEnd,
            rootIndex + 1,
            inEnd
          )

          return root
        }

        return build(preorder, inorder, 0, n - 1, 0, n - 1)
      }
    #+end_src

** 遍历
  [[https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--22/][详细通俗的思路分析，多解法]] @windliang

* 参考
  -[[https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/cong-qian-xu-yu-zhong-xu-bian-li-xu-lie-gou-zao-9/][ 从前序与中序遍历序列构造二叉树]]
