对二叉树进行序列化，肯定需要遍历，遍历就前中后，那么用哪种合适呢？

之前的第 7 题，根据前序遍历和中序遍历重构二叉树，是否可以借鉴，把
二叉树序列位前序遍历序列和中序遍历序列，再还原呢？

但第 7 题，节点值是不重复的，现在序列化的二叉树有可能存在重复的值，
此时，要在中序遍历中找根节点就难以查找了。另外，要通过前序和中序完
成构建，需要将序列全部读取后才能开始，如果这两个序列很长，则需要等
待一段时间才能开始构建，显然有点慢。

既然要序列化，并且要反序列化，那不同的二叉树得到的序列肯定是不同的，
且是唯一的。是否有办法让二叉树通过遍历后，得到一个唯一的序列呢？

当把一颗二叉树缺失的节点补全，例如有左节点但没右节点的二叉树，就
可以得到一个唯一的二叉树。当碰到 null 的节点时，则用特殊字符 `$`
进行代替。

而又因为希望反序列化时，可以尽早开始构建，那们就得先得到根节点的值，
于是选择前序遍历来实现序列化。

反序列化的时候，则是根据序列，从根节点开始构建，然后构建左子树，
之后是右子树，当碰到 `$` 时，则停止构建，直到序列全部被反序列化。
