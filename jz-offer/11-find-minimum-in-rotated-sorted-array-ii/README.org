* 观察特征
  - 旋转后，数组会被分为前后两部分
  - 前后两部分的数组都是排序好的
  - 前面部分的值都大于或等于后面数字的值
  - 如果旋转过，则第一个元素的值必然大于等于最后的值
  - 在两个数组的交界处，左边是最大值，右边是最小值

* 二分查找
  由于数组在一定程度上是排序好的，可以尝试用二分查找法。

  那么，怎么将数组的查询范围二分呢?

  找一个中间值：

  如果中间值大于等于最左边的值，说明这个中间值位于左边的递增数组中，最小值在这个中间值之后。
  此时，可以把左指针等于中间指针(left = mid), 不是中间值往右(left = mid + 1)，因为目的是把左
  指针移动到两个数组的交界处。

  如果中间值小于等于最右边的值，说明这个中间值位于右边的递增数组，最小值在这个中间值之前。此时
  可以把左指针设置为中间指针，把右指针移动靠近交界。

  经过几次循环，最终左右指针会在交界处的左右两边，此时，交界处右边是最小值，左边是最大值。

  循环的结束条件是左边值比右边值小，说明越过边界了。

* 特殊情况
** 数组旋转了 0 次
   如果数组旋转了 0 次，相当于数组没有旋转，此时第一个值是最小的。

   此时不符合二分查找的条件，既左边数组的值大于右边数组的值，因此需要特殊处理一下。
** 数组元素出现重复
   如果数组元素出现重复，例如 [1,0,1,1,1], [1,1,1,0,1]， 此时中间值，左边值，右边值都相同，
   二分查找无法判断往哪一边缩小查询范围, 此时就对数组进行顺序遍历，找到最小值。
