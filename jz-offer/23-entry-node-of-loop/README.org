* 哈希表
  遍历一次链表，把每个节点存到哈希表中（Set）。如果没有环，那么遍历到最后就是 null，如果有
  环，则节点肯定在哈希表中出现。

  由于需要遍历一次，时间复杂度是 O(n), 由于需要存储所有节点，空间复杂度也是 O(n);

* 双指针
  双指针的做法可以减少空间复杂度，降低到 O(1)

  1. 利用快慢指针，快指针每次走两个节点，慢指针每次走一个节点，如果存在环的话，那么快指针
     最终会在环内，追上慢指针，相遇在某个节点，记为 meetingNode

     这就像两个人跑步一样，一个快一个慢，最终就会在跑道某个地方相遇，下次碰到环的问题，可以考虑双指针是否有用。

  2. 知道环中的任一相遇点，接下来还得找到环的入口点。[leetcode 题解](https://leetcode-cn.com/problems/c32eOV/solution/lian-biao-zhong-huan-de-ru-kou-jie-dian-vvofe/)
     中用数学等式解释了原理。

     利用快慢指针，快指针先走 n 步，n 为环内节点的个数，慢指针先不动，指向头。快慢指针同时往前走，当慢指针到达环的入口时，快指针也
     恰好走完一圈到达环的入口，这样就能找到入口了。

     为此需要：
     1. 计算环内节点的个数，可以通过 meetingNode 走一圈环计数获得

     2. 得到环内节点个数后，用快慢指针，快指针先走 n 步后，慢指针和快指针同步往前走，直到相遇就是入口了。
