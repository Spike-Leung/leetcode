[[https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/solution/mian-shi-ti-59-i-hua-dong-chuang-kou-de-zui-da-1-6/][剑指 Offer 59 - I. 滑动窗口的最大值（单调队列）]]

这道题很容易想到暴力解，每次移动窗口，遍历窗口内元素，获得最大值即可。
对于长度为 n 的数组，窗口大小为 k，则可以形成 n - k + 1 个窗口。
每个窗口需要遍历判断出最大值，时间复杂度为 O(k)，所以总的时间复杂度是 O((n-k+1)*k) 即 O(nk)


对于滑动窗口，滑动一下，就会删除一个窗口左边的元素，添加一个窗口右边的元素，这种操作，可以联想到队列和栈。
根据之前做过的[[https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/solution/mian-shi-ti-30-bao-han-minhan-shu-de-zhan-fu-zhu-z/][面试题30. 包含 min 函数的栈]], 可以考虑用类似的方法去实现，这样就可以把找最大值的时间复杂度
降低为O(1), 总的时间复杂度就变为 O(n)

那么，就要去建立一个辅助队列，队列里存放当前窗口的最大值。队列的头就是当前窗口的最大值。

当窗口移动时，上一个窗口的最大值也可能移出了窗口，则判断队列中的最大值，即队首元素是否不在窗口内，
如果不在则移出。

然后把新的元素加入队列，由于需哟保证队列头对应的就是当前窗口最大值，因此在加入时需要和队列元素比较，
如果队列元素比新增元素小，那么这些小的元素不可能是当前窗口的最大值，则先移出队列元素，再加入新增的元素。
