* 思路
  之前做的题，也利用过双指针进行替换，具体来说就是定义 l，r

  l 指向头， r 指向尾，然后向中间遍历，当 l 是 0， r 不是 0，则交换。

  这样就能把位于左边的 0，都交换到右边去，但这么做无法保证原来元素的相对顺序。

  看了题解，上述的思路不对。

  题解的思路是，利用一个指针 i，负责便利整个数组，当 nums[i] !== 0 的时候，将这个
  数字往前放，这样所有非 0 元素都会按照原来的相对顺序，都被放到前面，后面的就是 0 了，就完成了。

  具体来说，就是定义 i = 0, j = 0, 然后利用 i 遍历整个数组，当 nums[i] !== 0,

  则将 nums[i] 和 nums[j] 交换，交换后 j++ (指向下一个用于填充非 0 元素的位置)，i++

  直到  i < n, 时间复杂度为 O(n)

* 参考
  - [[https://leetcode-cn.com/problems/move-zeroes/solution/283-yi-dong-ling-shuang-zhi-zhen-zuo-fa-6wmvs/][283. 移动零 | 双指针做法超清晰讲解 【c++/java版本】]]
  - [[https://leetcode-cn.com/problems/move-zeroes/solution/yi-dong-ling-by-leetcode-solution/][移动零]]
