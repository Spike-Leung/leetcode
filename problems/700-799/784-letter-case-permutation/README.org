* 思路
  对于给定的字符串，判断每个字符是不是字母，如果是，则有大写和小写两种组合。

  利用递归去穷举所有组合即可。

  每次判断字符串第一个字符，如果是字母，则有大写和小写两种组合，如果是数字则直接使用。

  然后截取字符串，截取除了第一个字符意外的其它字符串，继续递归判断，直到只剩下一个字符的时候结束递归。

  在递归过程中去维护一个变量，保存前面的字符串的组合。

  递归结束时，将组合拼接输出到数组中。

** 不用内置函数，实现大小写转换
  这里用了内置函数 ~.toUpperCase()~ ~.toLowerCase()~, 面试时也许面试官希望用 ASCII 码去进行大小写切换。

  ~a~ 的 ASCII 码为 97， ~A~ 的 ASCII 码为 65，相差了 32。

  可知，小写字母减去 32 就是大写字母；大写字母加上 32 就是小写字母。

  32 可以表示为 2 的 5 次方，对于二进制数，加减 2 ^ 5 次方，相当于改变低位第五位的表示。

  第五位从 1 变为 0，则减少了 32，从 0 变为 1 则增加了 32.

  将某一位改变，可以通过异或运算，异或 1 实现，因为 1 异或 1 为 0， 0 异或 1 为 1.

  String.fromCharCode("a".charCodeAt(0) ^ (1 << 5))  => "A"

** 位掩码实现
   假设字符串有三个字母，那么就有 2 的 3 次方种组合。可以用位掩码唯一表示。
   例如 aaa，可以用 000 表示 aaa, 001 表示 aaA，010 表示 aAa...

   那么，可以根据字符串有多少个字母，构造一个对应位数的掩码，假设有 N 个字母，则有
   2 的 N 次方种掩码表示，再根据掩码表示，去拼接大小写的字符。

   遍历所有的掩码表示，对于每一个掩码表示，遍历字符串，如果是数字则直接拼接到目标字符串，
   如果是字母，则根据掩码(每次从最低位开始找，直到找到最高位)，
   判断应该用大写字母还是小写字母，再拼接到目标字符串。
* 参考
  - [[https://leetcode.cn/problems/letter-case-permutation/solution/zi-mu-da-xiao-xie-quan-pai-lie-by-leetcode/][字母大小写全排列]]
