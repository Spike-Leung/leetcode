* BFS + 最大包围圈(有限步数)
- [[https://leetcode-cn.com/problems/escape-a-large-maze/solution/tao-chi-da-mi-gong-by-leetcode-solution-qxhz/][逃离大迷宫]]
- [[https://leetcode-cn.com/problems/escape-a-large-maze/solution/tong-ge-lai-shua-ti-la-shuang-xiang-bfs-dgx39/][【彤哥来刷题啦】双向BFS & 突破封锁！]]

 最初的想法，从 source 开始，往四个方向遍历，判断是否碰到阻碍，
 是否走过，是否越界，如果最终能够到达 target，则说明是连通的。
 如果走不到，则是不通的。

 但是迷宫的大小是 10 ^ 6 * 10 ^ 6 = 10 ^ 12, 如果这么去遍历的话，很容
 易就超出时间，或者造成栈溢出。

 看题目，可以看到迷宫是很大的，障碍相对于迷宫来说是很少的，只有最多
 200 个。于是可以想是否可以从数量少的地方着手。

什么情况下，source 无法移动到 target 呢？有两种情况，阻碍刚好把
source 完全包围了，或者把 target 完全包围了。

而由于障碍数是有限的，那么包围圈的面积也是有限的。如果知道障碍物包围
圈的最大面积，当从 source 往 target 走时，可以走的面积大于包围圈面积，
则意味着，source 可以突破包围圈，此时就可以停止 source 的继续遍历了。
再判断 target 是否也可以突破包围圈。如果两者都能够突破包围圈，那么，
source 总是能够到达 target 的。

这样一来，就把原来要遍历整个地图的复杂度，降低到遍历两个包围圈的复杂
度。

那么包围圈的最大面积如何取得呢？

当利用两个边界作为边，障碍物全部组成另一条边的时候，面积是最大的。
（想到利用数量少的障碍物，以及想到最大体积是个难点）

最大包围圈面积为 n * (n - 1) / 2

然后在遍历 source 到 target 的过程，由于遍历的位置的个数需要和包
围圈体积进行比较，因此考虑用广度优先算法 （BFS），利用队列，每次把四个
方向的点塞入队列，不断地去判断。
