* 思路
** 枚举
   双重循环，枚举左边界和右边界，同时维护两个变量min, max, 对应的是当前
   子数组的最大值和最小值。每次扩大右边界的时候，更新 min，max。
   min，max 可能还是之前子数组的min，max，也可能新的元素 nums[j]
   是新的 min 或者 max。

   每次遍历得到一个子数组就累积和。

   时间复杂度为 O(n ^ 2)
** 单调栈
   可以想到，子数组的累积和，就是所有子数组的最大值，减去左右子数组的最小值。
   为此，需要知道有哪些元素成为了最大值或最小值，以及他们成为最值的次数。

   在一个数组中，如果一个元素nums[i]，它左边的元素都比它小，右边的元素也比它小，那么
   这个元素就是这个数组的最小值。设 nums[i] 左边第一个不小于 nums[i] 的元素为 nums[l],
   右边第一个不小于 nums[i] 的元素为 nums[r], 那么，根据[[https://zh.wikipedia.org/wiki/%E4%B9%98%E6%B3%95%E5%8E%9F%E7%90%86][乘法原理]]，
   nums[i] 作为最小值的次数为 (i - l) * (r - i);

   同理可以计算每个元素最大值的次数。

   要找到当前元素左边和右边，第一个比它小的元素，可以考虑用单调栈。

   在用单调栈做比较时，如果碰到相等的情况，根据下标的大小，决定两者谁更大，例如 num[i] == num[j], i < j,
   那么认为 num[j] 相对更大

* 参考
  - [[https://leetcode-cn.com/problems/sum-of-subarray-ranges/solution/zi-shu-zu-fan-wei-he-by-leetcode-solutio-lamr/#comment][子数组范围和]]
