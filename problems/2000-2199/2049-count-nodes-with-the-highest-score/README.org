* 思路
  考虑在一棵树中，如果去掉某个节点，还剩下什么？

  剩余部分包含非空子树，以及从树中，去除 *以这个节点为根节点的子树* 后的子树。

  对于二叉树，就是左子树（如果有），右子树（如果有），以及去除自己为根节点后的子树。

  此时，这个节点的分数为： 左子树的节点个数(A) * 右子树的节点个数(B) * 把自己子树去掉后的子树的节点个数(C)

  C = parents.length (总共的节点个数) - (A + B) - 1 (移除的节点)

  统计节点个个数，应该要想到用 DFS。

  通过 parents，构建每个节点的子节点 childrens, childrens[i] = [a, b] 表示 节点 i 的有子节点 a， b.

  然后 DFS 从根节点开始遍历，计算子树节点个数 A，B，知道 A，B 后，就可以计算 C，也就可以计算分数，比较分数大小，
  统计最大分数的次数即可。
* 参考
  - [[https://leetcode-cn.com/problems/count-nodes-with-the-highest-score/solution/tong-ji-zui-gao-fen-de-jie-dian-shu-mu-b-n810/][统计最高分的节点数目]]
